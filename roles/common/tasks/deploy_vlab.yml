---
- name: Include vesxi vars
  include_vars: vesxi_vars.yml
  tags: ["deploy_vesxi","api_calls"]

- name: Include secrets
  include_vars: 
    file: secrets_physical_esx.yml
  tags: ["deploy_vesxi","api_calls"]

- name: Include vcsa connection vars
  include_vars: vcsa_vars.yml
  tags: ["deploy_vesxi","api_calls"]

- name: Include content library vars
  include_vars: content_library_vars.yml
  tags: ["deploy_vesxi","api_calls"]

- name: Generate list for number of hosts
  set_fact:
    mysequence: "{{ range(1, vesxi_host_count + 1) | list }}"
  tags: ["deploy_vesxi"]


- name: Get all hosts in DC
  shell: govc ls /{{ vcsa_dc_name }}/host | /usr/bin/awk -F"/" '{print $NF}'
  environment:
    GOPATH: "{{ go_path }}"
    PATH: "{{ go_bin }}"
    GOVC_INSECURE: 1
    GOVC_URL: "{{ vcsa_dns_name }}"
    GOVC_USERNAME: "{{ vcsa_username }}@{{ vcsa_sso_domain }}"
    GOVC_PASSWORD: "{{ esx_password }}"
    GOVC_RESOURCE_POOL: "*/Resources"
  register: host_names
  delegate_to: localhost
  tags: ["deploy_vesxi"]

- name: Convert Host list to var
  set_fact:
    hostnames: "{{ host_names.stdout.split('\n') }}"
  tags: ['deploy_vesxi']

- name: debug hostanmes variable
  debug:
    var: hostnames
    verbosity: 2
  tags: ['deploy_vesxi']

- name: Get Host IPs
  shell: govc host.info -dc={{ vcsa_dc_name }} -host={{ item }} -json | /usr/bin/jq -r .HostSystems[].Config.Network.Vnic[].Spec.Ip.IpAddress
  environment:
    GOPATH: "{{ go_path }}"
    PATH: "{{ go_bin }}"
    GOVC_INSECURE: 1
    GOVC_URL: "{{ vcsa_dns_name }}"
    GOVC_USERNAME: "{{ vcsa_username }}@{{ vcsa_sso_domain }}"
    GOVC_PASSWORD: "{{ esx_password }}"
    GOVC_RESOURCE_POOL: "*/Resources"
  register: host_results
  loop: "{{ hostnames }}"
  delegate_to: localhost
  tags: ["deploy_vesxi"]

- name: Debug variable ip_results
  debug:
    var: host_results.results
    verbosity: 2
  tags: ['deploy_vesxi']

- name: Change results to dict
  set_fact:
    ip_results: "{{ ip_results|default({}) | combine( {item.item: item.stdout} ) }}"
  with_items: "{{ host_results.results }}"
  delegate_to: localhost
  tags: ['deploy_vesxi']

- name: Debug variable ip_results
  debug:
    var: ip_results
    verbosity: 2
  tags: ['deploy_vesxi']

- name: Get VMs to check before deploy
  shell: govc find -type VirtualMachine -json | /usr/bin/jq -r . | /usr/bin/awk -F"/" '{print $NF}'
  environment:
    GOPATH: "{{ go_path }}"
    PATH: "{{ go_bin }}"
    GOVC_INSECURE: 1
    GOVC_URL: "{{ vcsa_dns_name }}"
    GOVC_USERNAME: "{{ vcsa_username }}@{{ vcsa_sso_domain }}"
    GOVC_PASSWORD: "{{ esx_password }}"
    GOVC_RESOURCE_POOL: "*/Resources"
  register: vm_results
  delegate_to: localhost
  tags: ["deploy_vesxi"]

- name: Set VM results fact
  set_fact:
    current_vms: "{{ vm_results.stdout }}"
  tags: ["deploy_vesxi"]

- name: Debug variable vm_results
  debug:
    var: vm_results
    verbosity: 2
  tags: ['deploy_vesxi']

- name: Debug msg vm_results
  debug:
    var: vm_results.stdout
    verbosity: 2
  tags: ['deploy_vesxi']

- name: Login into vCenter and get cookies
  uri:
    url: https://{{ vcsa_dns_name }}/rest/com/vmware/cis/session
    force_basic_auth: yes
    validate_certs: no
    method: POST
    user: "{{ vcsa_username }}@{{ vcsa_sso_domain }}"
    password: "{{ esx_password }}"
  register: login
  delegate_to: localhost
  tags: ["api_calls"]

- name: Get all hosts from vCenter using cookies
  uri:
    url: https://{{ vcsa_dns_name }}/rest/vcenter/host
    force_basic_auth: yes
    validate_certs: no
    headers:
      Cookie: "{{ login.set_cookie }}"
  register: vc_hosts
  delegate_to: localhost
  tags: ["api_calls"]

- name: Debug vchosts variable
  debug:
    msg: "{{ vc_hosts }}"
    verbosity: 2
  tags: ["api_calls"]

- name: Get network_id
  uri:
    url: https://{{ vcsa_dns_name }}/rest/vcenter/network
    force_basic_auth: yes
    validate_certs: no
    headers:
      Cookie: "{{ login.set_cookie }}"
  register: vc_networks
  delegate_to: localhost
  tags: ["api_calls"]

- name: Debug vc_networks variable
  debug:
    msg: "{{ vc_networks }}"
    verbosity: 2
  tags: ["api_calls"]

- name: Get datastore_id
  uri:
    url: https://{{ vcsa_dns_name }}/rest/vcenter/datastore?filter.names.1={{ default_datastore}}
    force_basic_auth: yes
    validate_certs: no
    headers:
      Cookie: "{{ login.set_cookie }}"
  register: vc_datastore
  delegate_to: localhost
  tags: ["api_calls"]

- name: Debug vc_datastore variable
  debug:
    msg: "{{ vc_datastore }}"
    verbosity: 2
  tags: ["api_calls"] 

- name: Get resource_pool_id
  uri:
    url: https://{{ vcsa_dns_name }}/rest/vcenter/resource-pool?filter.names.1=Resources&filter.hosts.1={{ vc_hosts.json.value[0].host}}
    force_basic_auth: yes
    validate_certs: no
    headers:
      Cookie: "{{ login.set_cookie }}"
  register: vc_resource_pool
  delegate_to: localhost
  tags: ["api_calls"]

- name: Debug resource_pool_id variable
  debug:
    msg: "{{ vc_resource_pool }}"
    verbosity: 2
  tags: ["api_calls"]


#- name: Get network_id
#- name: Get host_id
#- name: Get folder_id
#- name: Get resource_pool_id
#- name: Get datastore_id

- name: deploy vesxi
  include_tasks: vesxi_loop.yml
  loop: "{{ mysequence }}"
  loop_control:
    extended: yes
    loop_var: outer_item
  tags: ["deploy_vesxi"]

- name: Add vesxi to vcsa
  include_tasks: vesxi_hostadd_loop.yml
  loop: "{{ mysequence }}"
  loop_control:
    extended: yes
    loop_var: outer_item
  tags: ["deploy_vesxi"] 