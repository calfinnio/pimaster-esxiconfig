---
- name: Include vesxi vars
  include_vars: vesxi_vars.yml
  tags: ["deploy_vesxi","api_calls","host_id", "api_calls2"]

- name: Include secrets
  include_vars: 
    file: secrets_physical_esx.yml
  tags: ["deploy_vesxi","api_calls","host_id", "api_calls2"]

- name: Include vcsa connection vars
  include_vars: vcsa_vars.yml
  tags: ["deploy_vesxi","api_calls","host_id", "api_calls2"]

- name: Include content library vars
  include_vars: content_library_vars.yml
  tags: ["deploy_vesxi","api_calls","host_id", "api_calls2"]

- name: Generate list for number of hosts
  set_fact:
    mysequence: "{{ range(1, vesxi_host_count + 1) | list }}"
  tags: ["deploy_vesxi"]


- name: Get all hosts in DC
  shell: govc ls /{{ vcsa_dc_name }}/host | /usr/bin/awk -F"/" '{print $NF}'
  environment:
    GOPATH: "{{ go_path }}"
    PATH: "{{ go_bin }}"
    GOVC_INSECURE: 1
    GOVC_URL: "{{ vcsa_dns_name }}"
    GOVC_USERNAME: "{{ vcsa_username }}@{{ vcsa_sso_domain }}"
    GOVC_PASSWORD: "{{ esx_password }}"
    GOVC_RESOURCE_POOL: "*/Resources"
  register: host_names
  delegate_to: localhost
  tags: ["deploy_vesxi"]

- name: Convert Host list to var
  set_fact:
    hostnames: "{{ host_names.stdout.split('\n') }}"
  tags: ['deploy_vesxi']

- name: debug hostanmes variable
  debug:
    var: hostnames
    verbosity: 2
  tags: ['deploy_vesxi']

- name: Get Host IPs
  shell: govc host.info -dc={{ vcsa_dc_name }} -host={{ item }} -json | /usr/bin/jq -r .HostSystems[].Config.Network.Vnic[].Spec.Ip.IpAddress
  environment:
    GOPATH: "{{ go_path }}"
    PATH: "{{ go_bin }}"
    GOVC_INSECURE: 1
    GOVC_URL: "{{ vcsa_dns_name }}"
    GOVC_USERNAME: "{{ vcsa_username }}@{{ vcsa_sso_domain }}"
    GOVC_PASSWORD: "{{ esx_password }}"
    GOVC_RESOURCE_POOL: "*/Resources"
  register: host_results
  loop: "{{ hostnames }}"
  delegate_to: localhost
  tags: ["deploy_vesxi"]

- name: Debug variable ip_results
  debug:
    var: host_results.results
    verbosity: 2
  tags: ['deploy_vesxi']

- name: Change results to dict
  set_fact:
    ip_results: "{{ ip_results|default({}) | combine( {item.item: item.stdout} ) }}"
  with_items: "{{ host_results.results }}"
  delegate_to: localhost
  tags: ['deploy_vesxi']

- name: Debug variable ip_results
  debug:
    var: ip_results
    verbosity: 2
  tags: ['deploy_vesxi']

- name: Get VMs to check before deploy
  shell: govc find -type VirtualMachine -json | /usr/bin/jq -r . | /usr/bin/awk -F"/" '{print $NF}'
  environment:
    GOPATH: "{{ go_path }}"
    PATH: "{{ go_bin }}"
    GOVC_INSECURE: 1
    GOVC_URL: "{{ vcsa_dns_name }}"
    GOVC_USERNAME: "{{ vcsa_username }}@{{ vcsa_sso_domain }}"
    GOVC_PASSWORD: "{{ esx_password }}"
    GOVC_RESOURCE_POOL: "*/Resources"
  register: vm_results
  delegate_to: localhost
  tags: ["deploy_vesxi"]

- name: Set VM results fact
  set_fact:
    current_vms: "{{ vm_results.stdout }}"
  tags: ["deploy_vesxi"]

- name: Debug variable vm_results
  debug:
    var: vm_results
    verbosity: 2
  tags: ['deploy_vesxi']

- name: Debug msg vm_results
  debug:
    var: vm_results.stdout
    verbosity: 2
  tags: ['deploy_vesxi']

- name: Login into vCenter and get cookies
  uri:
    url: https://{{ vcsa_dns_name }}/rest/com/vmware/cis/session
    force_basic_auth: yes
    validate_certs: no
    method: POST
    user: "{{ vcsa_username }}@{{ vcsa_sso_domain }}"
    password: "{{ esx_password }}"
  register: login
  delegate_to: localhost
  tags: ["api_calls","host_id", "api_calls2"]

- name: Get all hosts from vCenter using cookies
  uri:
    url: https://{{ vcsa_dns_name }}/rest/vcenter/host
    force_basic_auth: yes
    validate_certs: no
    headers:
      Cookie: "{{ login.set_cookie }}"
  register: vc_hosts
  delegate_to: localhost
  tags: ["api_calls","host_id"]

- name: Debug vc_hosts variable
  debug:
    msg: "{{ vc_hosts }}"
    verbosity: 2
  tags: ["api_calls","host_id"]

#- name: Set var for host_id
#  set_fact:
#    host_id: "{{ vc_hosts.json }}" | json_query([?'value[*].name' == {{ esx_address }}].host)"
#  tags: ["api_calls"]

- name: Set var for host_id
  set_fact:
    host_id: "{{vc_hosts.json | json_query(query) }}"
  vars:
    query: "value[?name=='{{esx_address}}'].host"
  tags: ["api_calls","host_id"]

- name: Debug host_id variable
  debug:
    msg: "{{ host_id.0 }}"
    verbosity: 2
  tags: ["api_calls","host_id"]

- name: Get network_id
  uri:
    url: https://{{ vcsa_dns_name }}/rest/vcenter/network
    force_basic_auth: yes
    validate_certs: no
    headers:
      Cookie: "{{ login.set_cookie }}"
  register: vc_networks
  delegate_to: localhost
  tags: ["api_calls"]

- name: Debug vc_networks variable
  debug:
    msg: "{{ vc_networks.json }}"
    verbosity: 2
  tags: ["api_calls"]

- name: Set var for network_id
  set_fact:
    network_id: "{{vc_networks.json | json_query(query) }}"
  vars:
    query: "value[?name=='{{default_portgroup}}'].network"
  tags: ["api_calls"]

- name: Get datastore_id
  uri:
    url: https://{{ vcsa_dns_name }}/rest/vcenter/datastore?filter.names.1={{ default_datastore }}
    force_basic_auth: yes
    validate_certs: no
    headers:
      Cookie: "{{ login.set_cookie }}"
  register: vc_datastore
  delegate_to: localhost
  tags: ["api_calls"]

- name: Debug vc_datastore variable
  debug:
    msg: "{{ vc_datastore }}"
    verbosity: 2
  tags: ["api_calls"] 

- name: Set var for datastore_id
  set_fact:
    datastore_id: "{{ vc_datastore.json.value.0.datastore }}"

  tags: ["api_calls"]

- name: Get resource_pool_id
  uri:
    url: https://{{ vcsa_dns_name }}/rest/vcenter/resource-pool?filter.names.1=Resources&filter.hosts.1={{ host_id | first }}
    force_basic_auth: yes
    validate_certs: no
    headers:
      Cookie: "{{ login.set_cookie }}"
  register: vc_resource_pool
  delegate_to: localhost
  tags: ["api_calls"]

- name: Debug resource_pool_id variable
  debug:
    msg: "{{ vc_resource_pool }}"
    verbosity: 2
  tags: ["api_calls"]

- name: Set var for resource_pool_id
  set_fact:
    resource_pool_id: "{{ vc_resource_pool.json.value[0].resource_pool }}"
  tags: ["api_calls"]

- name: Get folder_id
  uri:
    url: https://{{ vcsa_dns_name }}/rest/vcenter/folder?filter.type=VIRTUAL_MACHINE&filter.names.1=vm
    force_basic_auth: yes
    validate_certs: no
    headers:
      Cookie: "{{ login.set_cookie }}"
  register: vc_folder
  delegate_to: localhost
  tags: ["api_calls"]

- name: Debug vc_folder variable
  debug:
    msg: "{{ vc_folder }}"
    verbosity: 2
  tags: ["api_calls"] 

- name: Set var for folder_id
  set_fact:
    folder_id: "{{ vc_folder.json.value[0].folder }}"
  tags: ["api_calls"]
#- name: Set var for datastore_id
#  set_fact:
#    folder_id: "{{ vc_folder.json }} | json_query([?'value[*].name' == {{ default_datastore }}].datastore)"
#  tags: ["api_calls"]

#- name: Get network_id
#- name: Get host_id
#- name: Get folder_id
#- name: Get resource_pool_id
#- name: Get datastore_id

#- name: Get Library id
#  shell: govc library.ls -json | /usr/bin/jq -r .
#  environment:
#    GOPATH: "{{ go_path }}"
#    PATH: "{{ go_bin }}"
#    GOVC_INSECURE: 1
#    GOVC_URL: "{{ vcsa_dns_name }}"
#    GOVC_USERNAME: "{{ vcsa_username }}@{{ vcsa_sso_domain }}"
#    GOVC_PASSWORD: "{{ esx_password }}"
#    GOVC_RESOURCE_POOL: "*/Resources"
#  register: content_lib_ids_json
#  delegate_to: localhost
#  tags: ["api_calls"]

- name: Get library_id
  uri:
    url: https://{{ vcsa_dns_name }}/rest/com/vmware/content/library
    force_basic_auth: yes
    validate_certs: no
    headers:
      Cookie: "{{ login.set_cookie }}"
  register: content_lib_ids
  delegate_to: localhost
  tags: ["api_calls", "api_calls2"]

- name: Set fact for Content Library
  set_fact:
    content_lib_ids_loop: "{{content_lib_ids.json | json_query(query) }}"
  vars:
    query: "value[*]"
  tags: ["api_calls", "api_calls2"]

- name: Debug of Content library id json
  debug:
    msg: "{{ content_lib_ids_loop }}"
    verbosity: 2
  tags: ["api_calls", "api_calls2"]

- name: Loop over content_lib_ids to get required lib
  uri:
    url: https://{{ vcsa_dns_name }}/rest/com/vmware/content/library/id:{{ item }}
    force_basic_auth: yes
    validate_certs: no
    headers:
      Cookie: "{{ login.set_cookie }}"
  loop: "{{ content_lib_ids_loop }}"
  register: content_lib_details
  delegate_to: localhost
  tags: ["api_calls", "api_calls2"] 

#- name: Debug for loop over content libs
#  debug:
#    msg: "{{ content_lib_details.results.json }}"
#    verbosity: 2
#  tags: ["api_calls", "api_calls2"]

- name: Get correct id
  set_fact:
    json_results: "{{ json_results|default([]) + [ {'name': item.json.value.name, 'id': item.item} ] }}"
  loop: "{{ content_lib_details.results }}"
  tags: ["api_calls2"]

- name: debug new loop 
  debug:
    msg: "{{ json_results }}"
  tags: ["api_calls2"]

- name: Set fact for required Content Library
  set_fact:
    content_lib_id: "{{ json_results | json_query(query) }}"
  vars:
    query: "[?name=='{{content_library_name}}'].id"
  tags: ["api_calls", "api_calls2"]

- name: Debug of Content library id
  debug:
    msg: "{{ content_lib_id }}"
    verbosity: 2
  tags: ["api_calls", "api_calls2"]

- name: Get Library items
  uri:
    url: https://{{ vcsa_dns_name }}/rest/com/vmware/content/library/item?library_id={{ content_lib_id[0] }}
    force_basic_auth: yes
    validate_certs: no
    headers:
      Cookie: "{{ login.set_cookie }}"
  register: content_lib_items
  delegate_to: localhost
  tags: ["api_calls", "api_calls2"] 

- name: Debug of Content library items
  debug:
    msg: "{{ content_lib_items }}"
    verbosity: 2
  tags: ["api_calls", "api_calls2"]

- name: Set fact for library items
  set_fact:
    content_lib_items_list: "{{ content_lib_items.json.value }}"
  tags: ["api_calls", "api_calls2"]

- name: Debug of Content library items list
  debug:
    msg: "{{ content_lib_items_list }}"
    verbosity: 2
  tags: ["api_calls", "api_calls2"]

- name: Loop over content_lib_items_list to get required item id
  uri:
    url: https://{{ vcsa_dns_name }}/rest/com/vmware/content/library/item/id:{{ item }}
    force_basic_auth: yes
    validate_certs: no
    headers:
      Cookie: "{{ login.set_cookie }}"
  loop: "{{ content_lib_items_list }}"
  register: content_lib_item_details
  delegate_to: localhost
  tags: ["api_calls", "api_calls2"] 

- name: Debug of Content library items details
  debug:
    msg: "{{ content_lib_item_details }}"
    verbosity: 2
  tags: ["api_calls", "api_calls2"]

- name: Get dict of item ids and names only
  set_fact:
    json_lib_item_results: "{{ json_results|default([]) + [ {'name': item.json.value.name, 'id': item.item} ] }}"
  loop: "{{ content_lib_item_details.results }}"
  tags: ["api_calls2"]

- name: Set fact for required Content Library
  set_fact:
    content_lib_item_id: "{{ json_lib_item_results | json_query(query) }}"
  vars:
    query: "[?name=='{{vesxi_ovf_name}}'].id"
  tags: ["api_calls", "api_calls2"]

- name: Debug of Content library items details
  debug:
    msg: "{{ content_lib_item_id }}"
    verbosity: 2
  tags: ["api_calls", "api_calls2"]

#- name: loop library items to find matching name
#- name: set_fact for Library item id

- name: deploy vesxi
  include_tasks: vesxi_loop.yml
  loop: "{{ mysequence }}"
  loop_control:
    extended: yes
    loop_var: outer_item
  tags: ["deploy_vesxi"]

- name: Add vesxi to vcsa
  include_tasks: vesxi_hostadd_loop.yml
  loop: "{{ mysequence }}"
  loop_control:
    extended: yes
    loop_var: outer_item
  tags: ["deploy_vesxi"] 
