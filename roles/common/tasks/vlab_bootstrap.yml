---
- name: Include secrets
  include_vars: 
    file: secrets_physical_esx.yml
  tags: ["vlab-bootstrap"]

- name: Include vcsa connection vars
  include_vars: vcsa_vars.yml
  tags: ["vlab-bootstrap"]

- name: Include content library vars
  include_vars: content_library_vars.yml
  tags: ["vlab-bootstrap"]

- name: Check env for previous runs
  shell: govc datacenter.info -json | /usr/bin/jq -r .Datacenters[].Name
  environment:
    GOPATH: "{{ go_path }}"
    PATH: "{{ go_bin }}"
    GOVC_INSECURE: 1
    GOVC_URL: "{{ vcsa_dns_name }}"
    GOVC_USERNAME: "{{ vcsa_username }}@{{ vcsa_sso_domain }}"
    GOVC_PASSWORD: "{{ esx_password }}"
    GOVC_RESOURCE_POOL: "*/Resources"
  register: dc_results
  delegate_to: localhost
  tags: ["vlab-bootstrap"]

- name: convert list to var
  set_fact:
    dcresult: "{{ dc_results.stdout }}"
  tags: ['vlab-bootstrap']

- name: debug of govc json return
  debug:
    msg: "{{ dcresult }}"
    verbosity: 2
  tags: ['vlab-bootstrap']

- name: Debug number of elements
  debug:
    msg: "{{ dcresult|length }}"
    verbosity: 2
  tags: ['vlab-bootstrap']

- name: Debug variable dcresult
  debug:
    var:  dcresult
    verbosity: 2
  tags: ['vlab-bootstrap']

- name: Create initial datacenter
  shell: govc datacenter.create {{ vcsa_dc_name }} 
  environment:
    GOPATH: "{{ go_path }}"
    PATH: "{{ go_bin }}"
    GOVC_INSECURE: 1
    GOVC_URL: "{{ vcsa_dns_name }}"
    GOVC_USERNAME: "{{ vcsa_username }}@{{ vcsa_sso_domain }}"
    GOVC_PASSWORD: "{{ esx_password }}"
    GOVC_RESOURCE_POOL: "*/Resources"
  when: dcresult|length == 0 or vcsa_dc_name not in dcresult
  delegate_to: localhost
  tags: ["vlab-bootstrap"]

#- name: Simple PTR record (IPV4 address) lookup for esx_address
#  debug: 
#    msg: "{{ lookup('dig', esx_address )}}"
#  tags: ["vlab-bootstrap"]
- name: Count hosts in DC
  shell: govc ls /{{ vcsa_dc_name }}/host | /usr/bin/wc -l
  environment:
    GOPATH: "{{ go_path }}"
    PATH: "{{ go_bin }}"
    GOVC_INSECURE: 1
    GOVC_URL: "{{ vcsa_dns_name }}"
    GOVC_USERNAME: "{{ vcsa_username }}@{{ vcsa_sso_domain }}"
    GOVC_PASSWORD: "{{ esx_password }}"
    GOVC_RESOURCE_POOL: "*/Resources"
  register: host_count
  delegate_to: localhost
  tags: ["vlab-bootstrap"]

- name: Debug host count
  debug:
    msg: "{{ host_count }}"
    verbosity: 2
  tags: ["vlab-bootstrap"]

- name: Get all hosts in DC
  shell: govc ls /{{ vcsa_dc_name }}/host | /usr/bin/awk -F"/" '{print $NF}'
  environment:
    GOPATH: "{{ go_path }}"
    PATH: "{{ go_bin }}"
    GOVC_INSECURE: 1
    GOVC_URL: "{{ vcsa_dns_name }}"
    GOVC_USERNAME: "{{ vcsa_username }}@{{ vcsa_sso_domain }}"
    GOVC_PASSWORD: "{{ esx_password }}"
    GOVC_RESOURCE_POOL: "*/Resources"
  register: host_names
  delegate_to: localhost
  tags: ["vlab-bootstrap"]

- name: Convert Host list to var
  set_fact:
    hostnames: "{{ host_names.stdout.split('\n') }}"
  tags: ['vlab-bootstrap']

- name: debug hostanmes variable
  debug:
    var: hostnames
    verbosity: 2
  tags: ['vlab-bootstrap']

- name: Get Host IPs
  shell: govc host.info -dc={{ vcsa_dc_name }} -host={{ item }} -json | /usr/bin/jq -r .HostSystems[].Config.Network.Vnic[].Spec.Ip.IpAddress
  environment:
    GOPATH: "{{ go_path }}"
    PATH: "{{ go_bin }}"
    GOVC_INSECURE: 1
    GOVC_URL: "{{ vcsa_dns_name }}"
    GOVC_USERNAME: "{{ vcsa_username }}@{{ vcsa_sso_domain }}"
    GOVC_PASSWORD: "{{ esx_password }}"
    GOVC_RESOURCE_POOL: "*/Resources"
  register: host_results
  loop: "{{ hostnames }}"
  delegate_to: localhost
  tags: ["vlab-bootstrap"]

- name: Debug variable ip_results
  debug:
    var: host_results.results
    verbosity: 2
  tags: ['vlab-bootstrap']

- name: Change results to dict
  set_fact:
    ip_results: "{{ ip_results|default({}) | combine( {item.item: item.stdout} ) }}"
  with_items: "{{ host_results.results }}"
  delegate_to: localhost
  tags: ['vlab-bootstrap']

- name: Debug variable ip_results
  debug:
    var: ip_results
    verbosity: 2
  tags: ['vlab-bootstrap']

- name: Add physical host to datacenter
  shell: govc host.add -hostname={{ hostvars.esx1.ansible_host }} -password={{ esx_password }} -username={{ esx_user }} -dc={{ vcsa_dc_name }} -noverify=true
  environment:
    GOPATH: "{{ go_path }}"
    PATH: "{{ go_bin }}"
    GOVC_INSECURE: 1
    GOVC_URL: "{{ vcsa_dns_name }}"
    GOVC_USERNAME: "{{ vcsa_username }}@{{ vcsa_sso_domain }}"
    GOVC_PASSWORD: "{{ esx_password }}"
    GOVC_RESOURCE_POOL: "*/Resources"
  when: hostvars.esx1.ansible_host not in ip_results or host_count == 0
  delegate_to: localhost
  tags: ["vlab-bootstrap"]

- name: Check for existing content libraries
  shell: govc library.ls -json | /usr/bin/wc -l
  environment:
    GOPATH: "{{ go_path }}"
    PATH: "{{ go_bin }}"
    GOVC_INSECURE: 1
    GOVC_URL: "{{ vcsa_dns_name }}"
    GOVC_USERNAME: "{{ vcsa_username }}@{{ vcsa_sso_domain }}"
    GOVC_PASSWORD: "{{ esx_password }}"
    GOVC_RESOURCE_POOL: "*/Resources"
  register: count_content_libraries
  delegate_to: localhost
  tags: ["vlab-bootstrap"]

- name: Set dummy content library list
  set_fact:
    content_libraries: zero
  when: count_content_libraries == 0
  delegate_to: localhost
  tags: ["vlab-bootstrap"]

- name: Get content libraries
  shell: govc library.ls -json | /usr/bin/jq -r .[].name
  environment:
    GOPATH: "{{ go_path }}"
    PATH: "{{ go_bin }}"
    GOVC_INSECURE: 1
    GOVC_URL: "{{ vcsa_dns_name }}"
    GOVC_USERNAME: "{{ vcsa_username }}@{{ vcsa_sso_domain }}"
    GOVC_PASSWORD: "{{ esx_password }}"
    GOVC_RESOURCE_POOL: "*/Resources"
  register: content_libraries_raw
  when: count_content_libraries != 0
  delegate_to: localhost
  tags: ["vlab-bootstrap"]

- name: Set dummy content library list
  set_fact:
    content_libraries: "{{ content_libraries.stdout }}"
  when: count_content_libraries != 0
  delegate_to: localhost
  tags: ["vlab-bootstrap"]

- name: Get Content Library SSL SHA1 Thumbprint
  shell: /usr/bin/echo | /usr/bin/openssl s_client -showcerts -servername download3.vmware.com -connect download3.vmware.com:443 2>/dev/null | /usr/bin/openssl x509 -fingerprint -noout -sha1 | /usr/bin/awk '{print substr($0,index($0,"=")+1)}'
  delegate_to: localhost
  register: ssl_thumbprint
  when: content_library_name not in content_libraries.stdout
  tags: ["vlab-bootstrap"]

- name: Debug getting SSL Thumbprint
  debug:
    var: ssl_thumbprint
    verbosity: 2
  tags: ["vlab-bootstrap"]

- name: deploy content library
  shell: govc library.create -sub={{ subscription_url }} -ds={{ default_datastore }} -dc={{ vcsa_dc_name }} -sub-ondemand -thumbprint={{ ssl_thumbprint.stdout }} {{ content_library_name }}
  environment:
    GOPATH: "{{ go_path }}"
    PATH: "{{ go_bin }}"
    GOVC_INSECURE: 1
    GOVC_URL: "{{ vcsa_dns_name }}"
    GOVC_USERNAME: "{{ vcsa_username }}@{{ vcsa_sso_domain }}"
    GOVC_PASSWORD: "{{ esx_password }}"
    GOVC_DATASTORE: "{{ default_datastore }}"
    GOVC_RESOURCE_POOL: "*/Resources"
  delegate_to: localhost
  when: content_library_name not in content_libraries.stdout
  tags: ["vlab-bootstrap"]



