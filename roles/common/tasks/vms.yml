---
- name: Include secrets
  include_vars: 
    file: secrets_physical_esx.yml
  tags: ["vms","vcsa_template"]

- name: import vars for nfs
  include_vars: nfs-vars.yml
  tags: ["vms"]

- name: Get VMs on host
  shell: govc find . -type m  | /usr/bin/wc -l
  environment:
    GOPATH: "{{ go_path }}"
    PATH: "{{ go_bin }}"
    GOVC_INSECURE: 1
    GOVC_URL: "{{ esx_address }}"
    GOVC_USERNAME: "{{ esx_user }}"
    GOVC_PASSWORD: "{{ esx_password }}"
    GOVC_DATASTORE: "{{ default_datastore }}"
    GOVC_NETWORK: "{{ default_portgroup }}"
    GOVC_RESOURCE_POOL: "*/Resources"
  delegate_to: localhost
  register: esx1_vms_count
  tags: ["vms"]

- name: Set count of vms on physical esxi host
  set_fact:
    count_vms_local: "{{ esx1_vms_count.stdout | int }}"
  delegate_to: localhost
  tags: ["vms"]


- name: Hacky fix for VM creation - generate guid
  shell: dbus-uuidgen | cut -c 1-12
  register: guid
  delegate_to: localhost
  when: count_vms_local == "0"
  tags: ["vms"]
  
- name: deploy dummy vm (Hacky fix)
  shell: govc vm.create {{ guid.stdout }}
  environment:
    GOPATH: "{{ go_path }}"
    PATH: "{{ go_bin }}"
    GOVC_INSECURE: 1
    GOVC_URL: "{{ esx_address }}"
    GOVC_USERNAME: "{{ esx_user }}"
    GOVC_PASSWORD: "{{ esx_password }}"
    GOVC_DATASTORE: "{{ default_datastore }}"
    GOVC_NETWORK: "{{ default_portgroup }}"
    GOVC_RESOURCE_POOL: "*/Resources"
  delegate_to: localhost
  when: count_vms_local == "0"
  tags: ["vms"]

- name: Get VMs
  shell: esxcli --formatter=csv vm process list > /tmp/vms.csv
  tags: ["pre_vms", "vms"]

- name: stat file to check it is not zero
  shell: wc -c /tmp/vms.csv  | awk '{print $1}'
  register: stvm
  tags: ["vms"]

- name: Read CSV
  read_csv:
    path: /tmp/vms.csv
    key: DisplayName
  register: vms
  when: stvm.stdout != "0"
  tags: ["pre_vms", "vms"]

- name: Debug to show VMs
  debug:
    msg: "{{ vms }}"
    verbosity: 2
  tags: ["pre_vms", "vms"]

- name: Remove dummy vm (END Hacky fix)
  shell: govc vm.destroy {{ guid.stdout }}
  environment:
    GOPATH: "{{ go_path }}"
    PATH: "{{ go_bin }}"
    GOVC_INSECURE: 1
    GOVC_URL: "{{ esx_address }}"
    GOVC_USERNAME: "{{ esx_user }}"
    GOVC_PASSWORD: "{{ esx_password }}"
    GOVC_DATASTORE: "{{ default_datastore }}"
    GOVC_NETWORK: "{{ default_portgroup }}"
    GOVC_RESOURCE_POOL: "*/Resources"
  delegate_to: localhost
  when: count_vms_local == "0"
  tags: ["vms"]

- name: Include pfsense vars
  include_vars: pfsense_vars.yml
  tags: ["pfsense", "pfsense_post"]

- name: Deploy pfsense OVF
  command: >
    "{{ pfsense_ovftool_path }}"
    --acceptAllEulas
    --noSSLVerify
    --name={{ pfsense_vm_name }}
    --X:logFile=/vmfs/volumes/{{ nfs_mount_name }}/ovftool.log
    --diskMode={{ pfsense_provision_mode }}
    --datastore={{ default_datastore }}
    --powerOn
    "{{ pfsense_ovf_path }}"
    vi://'{{ esx_user }}':'{{ esx_password }}'@{{ esx_address }}
  when: pfsense_vm_name not in vms.dict
  tags: ["pfsense"]

- name: Wait for ping to pfsense
  command: /bin/ping -c 1 {{ pfsense_wan_ip }}
  register: result
  retries: 150
  delay: 10
  until: result is not failed
  delegate_to: localhost
  tags: ["pfsense"]

- name: Wait for UI load
  uri:
    url: "http://{{ pfsense_wan_ip }}"
    follow_redirects: all
    method: GET
    validate_certs: no
  register: _result
  until: _result.status == 200
  retries: 720 # 720 * 5 seconds = 1hour (60*60/5)
  delay: 5 # Every 5 seconds
  delegate_to: localhost
  tags: ["pfsense"]

- name: Mount NFS to directory
  mount:
    path: "{{ pfsense_config_path }}"
    src: "{{ hostvars.pimaster.ansible_host }}:{{ nfs_share_path }}"
    fstype: nfs
    state: mounted
  become: yes
  when: pfsense_new_config|bool == true
  tags: ["pfsense_post"]
#  
- name: Copy file
  copy:
    src: "{{ pfsense_config_path }}{{ pfsense_config_filename }}"
    dest: /conf/config.xml
    remote_src: yes
  when: pfsense_new_config|bool == true
  tags: ["pfsense_post"]

- name: Reboot pfsense
  shell: reboot
  become: yes
  when: pfsense_new_config|bool == true
  tags: ["pfsense_post"]

- name: Wait for ping to pfsense
  command: /bin/ping -c 1 {{ pfsense_wan_ip }}
  register: result
  retries: 150
  delay: 10
  until: result is not failed
  delegate_to: localhost
  tags: ["pfsense"]

- name: Wait for UI load
  uri:
    url: "http://{{ pfsense_wan_ip }}"
    follow_redirects: all
    method: GET
    validate_certs: no
  register: _result
  until: _result.status == 200
  retries: 720 # 720 * 5 seconds = 1hour (60*60/5)
  delay: 5 # Every 5 seconds
  delegate_to: localhost
  tags: ["pfsense"]
  
- name: Include vcsa vars
  include_vars: vcsa_vars.yml
  tags: ["vcsa_deploy", "vcsa_template"]

- name: debug vcsa vars
  debug:
    msg: "{{ vcsa_vm_name }}"
  tags: ["vcsa_template"]

- name: Generate VCSA json for deployment
  template:
    src: vcsa.json.j2
    dest: "{{ role_path }}/files/vcsa.json"
  delegate_to: localhost
  tags: [ 'vcsa_template']

#- name: deploy VCSA
#  shell: govc import.ova -options={{ role_path }}/files/vcsa.json /mnt/usb/vcsa_iso/vcsa/VMware-vCenter-Server-Appliance-6.7.0.40000-14367737_OVF10.ova 
#  environment:
#    GOPATH: "{{ go_path }}"
#    PATH: "{{ go_bin }}"
#    GOVC_INSECURE: 1
#    GOVC_URL: "{{ esx_address }}"
#    GOVC_USERNAME: "{{ esx_user }}"
#    GOVC_PASSWORD: "{{ esx_password }}"
#    GOVC_DATASTORE: "{{ default_datastore }}"
#    GOVC_NETWORK: "{{ default_portgroup }}"
#    GOVC_RESOURCE_POOL: "*/Resources"
#  async: 3600
#  poll: 5
#  when: vcsa_vm_name not in vms.dict
#  delegate_to: localhost
#  tags: ["vcsa_deploy"]

- name: Deploy VCSA - ovftool
  command: >
    "{{ pfsense_ovftool_path }}" 
    --acceptAllEulas 
    --skipManifestCheck 
    --X:injectOvfEnv
    --noSSLVerify 
    --powerOn 
    --name={{ vcsa_vm_name }}
    --X:logFile=/vmfs/volumes/{{ nfs_mount_name }}/ovftool.log
    --diskMode=thin 
    --datastore={{ default_datastore }}
    --net:'Network 1={{ default_portgroup }}'
    --prop:guestinfo.cis.appliance.net.addr.family="ipv4"
    --prop:guestinfo.cis.appliance.net.mode="static"
    --prop:guestinfo.cis.appliance.net.addr={{ vcsa_ip_addr }}
    --prop:guestinfo.cis.appliance.net.prefix={{ vcsa_ip_prefix }}
    --prop:guestinfo.cis.appliance.net.gateway={{ vcsa_gateway }}
    --prop:guestinfo.cis.appliance.net.dns.servers={{ hostvars.pimaster.ansible_host }}
    --prop:guestinfo.cis.appliance.net.pnid={{ vcsa_dns_name }}
    --prop:guestinfo.cis.vmdir.password={{ esx_password }}
    --prop:guestinfo.cis.appliance.root.passwd={{ esx_password }}
    --prop:guestinfo.cis.deployment.node.type="embedded"
    --prop:guestinfo.cis.vmdir.domain-name={{ vcsa_sso_domain }}
    --prop:guestinfo.cis.deployment.autoconfig="True"
    --prop:guestinfo.cis.vmdir.site-name={{ vcsa_site_name }}
    --prop:guestinfo.cis.ceip_enabled="True"
    --prop:guestinfo.cis.appliance.root.shell="/bin/bash"
    --prop:guestinfo.cis.appliance.ssh.enabled="True"
    --prop:guestinfo.cis.appliance.ntp.servers={{ vcsa_gateway }}
    --prop:vami.domain.VMware-vCenter-Server-Appliance={{ vcsa_dns_domain }}
    --prop:vami.searchpath.VMware-vCenter-Server-Appliance={{ vcsa_dns_domain }}
    "{{ vcsa_ova_path }}"
    vi://'{{ esx_user }}':'{{ esx_password }}'@{{ esx_address }}
  when: vcsa_vm_name not in vms.dict
  tags: ["vcsa_deploy"]

- name: Wait for ping to VCSA
  command: /bin/ping -c 1 {{ vcsa_ip_addr }}
  register: result
  retries: 150
  delay: 10
  until: result is not failed
  delegate_to: localhost
  tags: ["vcsa_deploy"]

- name: Pause play until vcsa/ui URL is reachable from this host
  uri:
    url: "http://{{ vcsa_ip_addr }}/ui"
    follow_redirects: all
    method: GET
    validate_certs: no
  register: _result
  until: _result.status == 200
  retries: 720 # 720 * 5 seconds = 1hour (60*60/5)
  delay: 5 # Every 5 seconds
  delegate_to: localhost
  tags: ["vcsa_deploy"]

- name: Add pfsense to autostart
  shell: govc host.autostart.add -start-delay=60 -start-order=1 {{ pfsense_vm_name }}
  environment:
    GOPATH: "{{ go_path }}"
    PATH: "{{ go_bin }}"
    GOVC_INSECURE: 1
    GOVC_URL: "{{ esx_address }}"
    GOVC_USERNAME: "{{ esx_user }}"
    GOVC_PASSWORD: "{{ esx_password }}"
    GOVC_DATASTORE: "{{ default_datastore }}"
    GOVC_NETWORK: "{{ default_portgroup }}"
    GOVC_RESOURCE_POOL: "*/Resources"
  delegate_to: localhost
  tags: ["vms", "autostart"]

- name: add vcsa to autostart
  shell: govc host.autostart.add -start-delay=120 -start-order=2 {{ vcsa_vm_name }}
  environment:
    GOPATH: "{{ go_path }}"
    PATH: "{{ go_bin }}"
    GOVC_INSECURE: 1
    GOVC_URL: "{{ esx_address }}"
    GOVC_USERNAME: "{{ esx_user }}"
    GOVC_PASSWORD: "{{ esx_password }}"
    GOVC_DATASTORE: "{{ default_datastore }}"
    GOVC_NETWORK: "{{ default_portgroup }}"
    GOVC_RESOURCE_POOL: "*/Resources"
  delegate_to: localhost
  tags: ["vms", "autostart"]

- name: Enabled Autostart
  shell: govc host.autostart.configure -enabled=true
  environment:
    GOPATH: "{{ go_path }}"
    PATH: "{{ go_bin }}"
    GOVC_INSECURE: 1
    GOVC_URL: "{{ esx_address }}"
    GOVC_USERNAME: "{{ esx_user }}"
    GOVC_PASSWORD: "{{ esx_password }}"
    GOVC_DATASTORE: "{{ default_datastore }}"
    GOVC_NETWORK: "{{ default_portgroup }}"
    GOVC_RESOURCE_POOL: "*/Resources"
  delegate_to: localhost
  tags: ["vms", "autostart"]
  
#- name: Include pfsense VM tasks
#  include_tasks: pfsense.yml
#  when: stvm.stdout == "0"
#  tags: ["pfsense", "vms"]
# date | sed '/^$/d;s/[[:blank:]]//g'